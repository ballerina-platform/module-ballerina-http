/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id "com.github.spotbugs" version "4.0.5"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "de.undercouch.download" version "4.0.4"
    id "net.researchgate.release" version "2.6.0"
}

ext.ballerinaLangVersion = project.ballerinaLangVersion
ext.stdlibMimeVersion = project.stdlibMimeVersion
ext.stdlibIoVersion = project.stdlibIoVersion
ext.stdlibLogVersion = project.stdlibLogVersion
ext.stdlibStringutilsVersion = project.stdlibStringutilsVersion
ext.stdlibAuthVersion = project.stdlibAuthVersion
ext.stdlibCacheVersion = project.stdlibCacheVersion
ext.stdlibTimeVersion = project.stdlibTimeVersion
ext.stdlibCryptoVersion = project.stdlibCryptoVersion
ext.stdlibFileVersion = project.stdlibFileVersion
ext.stdlibConfigVersion = project.stdlibConfigVersion
ext.stdlibReflectVersion = project.stdlibReflectVersion
ext.stdlibRuntimeVersion = project.stdlibRuntimeVersion
ext.stdlibSystemVersion = project.stdlibSystemVersion
ext.stdlibTaskVersion = project.stdlibTaskVersion

ext.slf4jVersion = project.slf4jVersion
ext.ballerinaTomlParserVersion = project.ballerinaTomlParserVersion
ext.commonsLang3Version = project.commonsLang3Version
ext.nettyVersion = project.nettyVersion
ext.nettyTcnativeVersion = project.nettyTcnativeVersion
ext.wso2TransportHttpNettyVersion = project.wso2TransportHttpNettyVersion
ext.wso2CommonsPoolVersion = project.wso2CommonsPoolVersion
ext.wso2SnakeYamlVersion = project.wso2SnakeYamlVersion
ext.bouncycastleVersion = project.bouncycastleVersion
ext.wso2CarbonMetricsVersion = project.wso2CarbonMetricsVersion
ext.mimepullVersion = project.mimepullVersion
ext.testngVersion =project.testngVersion

allprojects {
    group = project.group
    version = project.version

    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/snapshots/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/orgballerinalang-1614'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }

        maven {
            url "https://maven.pkg.github.com/ballerina-platform/module-ballerina-http"
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-mime'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-io'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-log'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-stringutils'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-auth'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-cache'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-time'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-crypto'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-file'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-config'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-reflect'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-runtime'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-system'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-task'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }
}

subprojects {
    apply plugin: 'java'

    configurations {
        ballerinaStdLibs
    }
    dependencies {
        /* Standard libraries */
        ballerinaStdLibs "org.ballerinalang:io-ballerina:${stdlibIoVersion}"
        ballerinaStdLibs "org.ballerinalang:log-ballerina:${stdlibLogVersion}"
        ballerinaStdLibs "org.ballerinalang:stringutils-ballerina:${stdlibStringutilsVersion}"
        ballerinaStdLibs "org.ballerinalang:mime-ballerina:${stdlibMimeVersion}"
        ballerinaStdLibs "org.ballerinalang:auth-ballerina:${stdlibAuthVersion}"
        ballerinaStdLibs "org.ballerinalang:cache-ballerina:${stdlibCacheVersion}"
        ballerinaStdLibs "org.ballerinalang:time-ballerina:${stdlibTimeVersion}"
        ballerinaStdLibs "org.ballerinalang:crypto-ballerina:${stdlibCryptoVersion}"
        ballerinaStdLibs "org.ballerinalang:file-ballerina:${stdlibFileVersion}"
        ballerinaStdLibs "org.ballerinalang:config-ballerina:${stdlibConfigVersion}"
        ballerinaStdLibs "org.ballerinalang:reflect-ballerina:${stdlibReflectVersion}"
        ballerinaStdLibs "org.ballerinalang:runtime-ballerina:${stdlibRuntimeVersion}"

        // Transitive dependencies
        ballerinaStdLibs "org.ballerinalang:system-ballerina:${stdlibSystemVersion}"
        ballerinaStdLibs "org.ballerinalang:task-ballerina:${stdlibTaskVersion}"
    }

    release {
        // Disable check snapshots temporarily
        buildTasks = []
        failOnSnapshotDependencies = false
        failOnCommitNeeded = false
        versionPropertyFile = 'gradle.properties'
        tagTemplate = 'v${version}'
        git {
            // To release from any branch
            requireBranch = null
        }
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/coverage-reports/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
        xml.destination = new File("${buildDir}/reports/jacoco/report.xml")
        html.destination = new File("${buildDir}/reports/jacoco/report.html")
        csv.destination = new File("${buildDir}/reports/jacoco/report.csv")
    }

    onlyIf = {
        true
    }
}
