/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
plugins {
    id 'jacoco'
}

apply plugin: 'java'

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - HTTP/WS Ballerina Tests'

def packageName = "http"
def packageOrg = "ballerina"
def moduleName = "tests"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaDependencyFile = new File("$project.projectDir/Dependencies.toml")
def originalConfig = ballerinaConfigFile.text
def originalDependency = ballerinaDependencyFile.text
def ballerinaDist = "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
def distributionBinPath =  project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bin"
def testCoverageParam = "--code-coverage --coverage-format=xml --includes=org.ballerinalang.net.*:ballerina.http*"

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-');
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

configurations {
    jbalTools
}

dependencies {
    jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    implementation group: 'org.ballerinalang', name: 'toml-parser', version: "${ballerinaTomlParserVersion}"
}

clean {
    delete "$project.projectDir/target"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", "jballerina-tools-zip")
    }
}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibsForTest(type: Copy) {
    dependsOn(unpackJballerinaTools)
    dependsOn(unpackStdLibs)

    into ballerinaDist

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

task copyHttpStdlib {
    dependsOn(":http-ballerina:build")
    dependsOn(copyStdlibsForTest)
    doLast {
        /* Copy HTTP module */
        copy {
            from "$project.rootDir/http-ballerina/build/cache_parent/bala"
            into "${ballerinaDist}/repo/bala"
        }
    }
}

task updateTomlVerions {
    doLast {
        def stdlibDependentIoVersion = stripBallerinaExtensionVersion(project.stdlibIoVersion)
        def stdlibDependentLogVersion = stripBallerinaExtensionVersion(project.stdlibLogVersion)
        def stdlibDependentRegexVersion = stripBallerinaExtensionVersion(project.stdlibRegexVersion)
        def stdlibDependentMimeVersion = stripBallerinaExtensionVersion(project.stdlibMimeVersion)
        def stdlibDependentAuthVersion = stripBallerinaExtensionVersion(project.stdlibAuthVersion)
        def stdlibDependentJwtVersion = stripBallerinaExtensionVersion(project.stdlibJwtVersion)
        def stdlibDependentOAuth2Version = stripBallerinaExtensionVersion(project.stdlibOAuth2Version)
        def stdlibDependentFileVersion = stripBallerinaExtensionVersion(project.stdlibFileVersion)

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        ballerinaConfigFile.text = newConfig

        def newDependencyConfig = ballerinaDependencyFile.text.replace("@stdlib.io.version@", stdlibDependentIoVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.log.version@", stdlibDependentLogVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.regex.version@", stdlibDependentRegexVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.mime.version@", stdlibDependentMimeVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.auth.version@", stdlibDependentAuthVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.jwt.version@", stdlibDependentJwtVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.oauth2.version@", stdlibDependentOAuth2Version)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.file.version@", stdlibDependentFileVersion)
        newDependencyConfig = newDependencyConfig.replace("@toml.version@", tomlVersion)
        ballerinaDependencyFile.text = newDependencyConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
        ballerinaDependencyFile.text = originalDependency
    }
}

def groupParams = ""
def disableGroups = ""
def debugParams = ""
def balJavaDebugParam = ""
def testParams = ""

task initializeVariables {
    if (project.hasProperty("groups")) {
        groupParams = "--groups ${project.findProperty("groups")}"
    }
    if (project.hasProperty("disable")) {
        disableGroups = "--disable-groups ${project.findProperty("disable")}"
    }
    if (project.hasProperty("debug")) {
        debugParams = "--debug ${project.findProperty("debug")}"
    }
    if (project.hasProperty("balJavaDebug")) {
        balJavaDebugParam = "BAL_JAVA_DEBUG=${project.findProperty("balJavaDebug")}"
    }

    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(":${packageName}-ballerina:test")) {
            testParams = "${testCoverageParam}"
        } else {
            testParams = "--skip-tests"
        }
    }
}

task ballerinaTest {
    inputs.dir file(project.projectDir)
    dependsOn(":${packageName}-${packageOrg}:build")
    dependsOn(updateTomlVerions)
    dependsOn(copyHttpStdlib)
    dependsOn(initializeVariables)
    dependsOn(":${packageName}-${packageOrg}-${moduleName}:compileJava")
    dependsOn(":${packageName}-${packageOrg}-${moduleName}:jar")
    dependsOn(":${packageName}-${packageOrg}-${moduleName}:processResources")
    finalizedBy(revertTomlFile)

    def privateKey = "tests/certsandkeys/private.key"
    def publicCert = "tests/certsandkeys/public.crt"
    def certsAndKeys = "--certificate.key=${privateKey} --public.cert=${publicCert}"


    doLast {
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "${balJavaDebugParam} ${distributionBinPath}/bal.bat test " +
                        "${testParams} ${groupParams} ${disableGroups} ${debugParams} ${certsAndKeys} && " +
                        "exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "${balJavaDebugParam} ${distributionBinPath}/bal test " +
                        "${testParams} ${groupParams} ${disableGroups} ${debugParams} ${certsAndKeys}"
            }
        }
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

task startLdapServer() {
    doLast {
        // This check is added to prevent starting the server in Windows OS, since the Docker image does not support
        // for Windows OS.
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=openldap-server"
                standardOutput = stdOut
            }
            if (!stdOut.toString().contains("openldap-server")) {
                println "Starting LDAP server."
                exec {
                    commandLine 'sh', '-c', "docker-compose -f $project.projectDir/tests/openldap/docker-compose.yml up -d"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                println "Waiting 15s until the LDAP server get initiated."
                sleep(15 * 1000)
            } else {
                println "LDAP server is already started."
            }
        }
    }
}

task stopLdapServer() {
    doLast {
        // This check is added to prevent trying to stop the server in Windows OS, since the Docker image not started
        // in Windows OS.
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=openldap-server"
                standardOutput = stdOut
            }
            if (stdOut.toString().contains("openldap-server")) {
                println "Stopping LDAP server."
                exec {
                    commandLine 'sh', '-c', "docker stop openldap-server"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                println "Waiting 5s until the LDAP server get stopped."
                sleep(5 * 1000)
            } else {
                println "LDAP server is not started."
            }
        }
    }
}

ballerinaTest.finalizedBy stopLdapServer
ballerinaTest.dependsOn startLdapServer
test.dependsOn ballerinaTest
build.dependsOn test
