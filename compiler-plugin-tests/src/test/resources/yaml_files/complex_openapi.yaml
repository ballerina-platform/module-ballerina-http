openapi: 3.0.1
info:
  title: Api V1
  version: 0.1.0
servers:
  - url: "{server}:{port}/api/v1"
    variables:
      server:
        default: http://localhost
      port:
        default: "9090"
paths:
  /users:
    get:
      operationId: getUsers
      parameters:
        - name: department
          in: query
          schema:
            type: string
            nullable: true
        - name: minAge
          in: query
          schema:
            type: integer
            format: int64
            nullable: true
        - name: maxAge
          in: query
          schema:
            type: integer
            format: int64
            nullable: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    post:
      operationId: postUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    delete:
      operationId: deleteUsers
      parameters:
        - name: confirm
          in: query
          schema:
            type: string
            nullable: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /users/{id}:
    get:
      operationId: getUsersId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    delete:
      operationId: deleteUsersId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    patch:
      operationId: patchUsersId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /health:
    get:
      operationId: getHealth
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /stats:
    get:
      operationId: getStats
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /users/bulk:
    post:
      operationId: postUsersBulk
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserInput'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /users/department/{oldDept}/{newDept}:
    patch:
      operationId: patchUsersDepartmentOlddeptNewdept
      parameters:
        - name: oldDept
          in: path
          required: true
          schema:
            type: string
        - name: newDept
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /callerInf:
    get:
      operationId: getCallerinf
      parameters:
        - name: abc
          in: query
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Caller'
      responses:
        "200":
          description: Ok
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /callerErr1:
    get:
      operationId: getCallererr1
      parameters:
        - name: abc
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Ok
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /callerErr2:
    post:
      operationId: postCallererr2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Caller'
        required: true
      responses:
        "201":
          description: Created
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /callerErr3:
    get:
      operationId: getCallererr3
      parameters:
        - name: abc
          in: query
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Caller'
      responses:
        "200":
          description: Ok
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
components:
  schemas:
    Caller:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
      additionalProperties: false
    ErrorPayload:
      required:
        - message
        - method
        - path
        - reason
        - status
        - timestamp
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: integer
          format: int64
        reason:
          type: string
        message:
          type: string
        path:
          type: string
        method:
          type: string
    ErrorResponse:
      required:
        - code
        - message
        - timestamp
      type: object
      properties:
        message:
          type: string
        code:
          type: string
        timestamp:
          type: string
      additionalProperties: false
    SuccessResponse:
      required:
        - message
      type: object
      properties:
        message:
          type: string
        data:
          type: object
      additionalProperties: false
    User:
      required:
        - age
        - createdAt
        - email
        - id
        - name
        - updatedAt
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        age:
          type: integer
          format: int64
        department:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      additionalProperties: false
    UserInput:
      required:
        - age
        - email
        - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        age:
          type: integer
          format: int64
        department:
          type: string
      additionalProperties: false
    UserUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        age:
          type: integer
          format: int64
        department:
          type: string
      additionalProperties: false
